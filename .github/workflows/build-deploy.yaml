name: Build and Deploy

on:
  workflow_call:
    secrets:
      TMD_APP_ID: {}
      TMD_APP_INSTALLATION_ID: {}
      TMD_APP_PRIVATE_KEY: {}
      TMD_WEBHOOK_SECRET: {}
      TMP_APP_ID: {}
      TMP_APP_INSTALLATION_ID: {}
      TMP_APP_PRIVATE_KEY: {}
      TMP_WEBHOOK_SECRET: {}
      OPENAI_APIKEY: {}
      OPENAI_ORGANIZATION: {}
    inputs:
      webPath:
        description: "Path to the Blazor WebAssembly project"
        required: false
        type: string
      solution:
        description: "Solution file name"
        required: false
        type: string
      buildPlatform:
        description: "Build platform"
        required: false
        default: "Any CPU"
        type: string
      buildConfiguration:
        description: "Build configuration"
        required: false
        default: "release"
        type: string
      dotnetVersion:
        description: ".NET SDK version"
        required: false
        default: "9.0.x"
        type: string
      lambdaRuntimeVersion:
        description: "AWS Lambda runtime version"
        required: false
        default: "net9.0"
        type: string
      nodeVersion:
        description: "Node version"
        required: false
        default: "18.x"
        type: string
      outputPath:
        description: "Output directory for builds"
        required: false
        default: "publish"
        type: string
      hasTests: # ‚úÖ New input to control test execution
        description: "Determines if tests should be run"
        required: false
        default: false
        type: boolean
      useMtpRunner: # ‚úÖ New input to control MTP runner usage
        description: "Use Microsoft Testing Platform runner (dotnet run) instead of legacy dotnet test"
        required: false
        default: false
        type: boolean
      enableCodeCoverage: # ‚úÖ New input to enable code coverage
        description: "Enable code coverage collection with MTP"
        required: false
        default: false
        type: boolean
      coverageThreshold: # ‚úÖ New input for coverage threshold
        description: "Minimum code coverage percentage required (0-100)"
        required: false
        default: 80
        type: number
      testDirectory: # ‚úÖ New input for test directory
        description: "Directory containing test projects"
        required: false
        default: "test"
        type: string
      runCdk:  # ‚úÖ New input to control CDK execution
        description: "Determines if AWS CDK steps should be run"
        required: false
        default: true
        type: boolean
      stackName:
        description: "Name of the AWS CDK stack"
        required: false
        type: string
      functions:
        description: "JSON array of Lambda functions to build"
        required: false
        type: string
        default: '[]'  # e.g. [{"path": "src/Foo", "name": "foo-func"}, {"path": "src/Bar", "name": "bar-func"}]        

permissions:
  id-token: write
  contents: write
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      outputPath: ${{ github.workspace }}/${{ inputs.outputPath }}

    steps:
      - name: Set Default Output Path If Not Provided
        run: |
          if [ -z "${{ inputs.outputPath }}" ]; then
            echo "outputPath=${{ github.workspace }}/publish" >> $GITHUB_ENV
          else
            echo "outputPath=${{ github.workspace}}/${{ inputs.outputPath }}" >> $GITHUB_ENV
          fi

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnetVersion }}

      - name: Restore Dependencies
        run: dotnet restore ${{ inputs.solution }}

      - name: Build Code
        run: dotnet build --configuration Release --no-restore

      - name: Discover Test Projects (MTP)
        if: inputs.hasTests == true && inputs.useMtpRunner == true
        id: discover-tests
        run: |
          echo "üîç Discovering test projects in ${{ inputs.testDirectory }} directory..."
          
          TEST_PROJECTS=""
          TOTAL_FOUND=0
          TOTAL_SKIPPED=0
          
          for csproj in $(find ${{ inputs.testDirectory }} -name "*.csproj" -type f 2>/dev/null || true); do
            TOTAL_FOUND=$((TOTAL_FOUND + 1))
            PROJECT_NAME=$(basename "$csproj" .csproj)
            
            # Check if project has IsTestProject=false
            if grep -q "<IsTestProject>false</IsTestProject>" "$csproj"; then
              echo "‚è≠Ô∏è  Skipping utility project: $PROJECT_NAME"
              TOTAL_SKIPPED=$((TOTAL_SKIPPED + 1))
              continue
            fi
            
            # Check if project has MTP runner enabled
            if grep -q "UseMicrosoftTestingPlatformRunner.*true" "$csproj"; then
              echo "‚úÖ Found MTP test project: $PROJECT_NAME"
              TEST_PROJECTS="$TEST_PROJECTS $csproj"
            else
              echo "‚ö†Ô∏è  Project $PROJECT_NAME doesn't have MTP runner enabled"
              TOTAL_SKIPPED=$((TOTAL_SKIPPED + 1))
            fi
          done
          
          echo "üìä Summary: Found $TOTAL_FOUND projects, using $((TOTAL_FOUND - TOTAL_SKIPPED)), skipped $TOTAL_SKIPPED"
          echo "test-projects=$TEST_PROJECTS" >> $GITHUB_OUTPUT
          
          # Validate we found at least one test project
          if [ -z "$TEST_PROJECTS" ]; then
            echo "‚ùå No MTP test projects found!"
            exit 1
          fi

      - name: Test Code (Legacy)
        if: inputs.hasTests == true && inputs.useMtpRunner == false
        run: dotnet test --no-restore

      - name: Test Code (MTP with Coverage)
        if: inputs.hasTests == true && inputs.useMtpRunner == true
        run: |
          echo "üß™ Running MTP tests with coverage: ${{ inputs.enableCodeCoverage }}"
          
          # Install ReportGenerator if coverage is enabled
          if [ "${{ inputs.enableCodeCoverage }}" == "true" ]; then
            echo "üìä Installing ReportGenerator..."
            dotnet tool install --global dotnet-reportgenerator-globaltool
          fi
          
          # Run each discovered test project
          for project in ${{ steps.discover-tests.outputs.test-projects }}; do
            PROJECT_NAME=$(basename "$project" .csproj)
            echo "üèÉ Running tests for: $PROJECT_NAME"
            
            if [ "${{ inputs.enableCodeCoverage }}" == "true" ]; then
              # Run with coverage
              dotnet run --project "$project" -- --coverage --coverage-output-format cobertura --coverage-output "coverage-$PROJECT_NAME.cobertura.xml"
            else
              # Run without coverage
              dotnet run --project "$project"
            fi
          done

      - name: Generate Coverage Reports
        if: inputs.hasTests == true && inputs.useMtpRunner == true && inputs.enableCodeCoverage == true
        run: |
          echo "üìä Generating combined coverage reports..."
          
          # Check if any coverage files exist
          if ! ls coverage-*.cobertura.xml 1> /dev/null 2>&1; then
            echo "‚ùå No coverage files found!"
            exit 1
          fi
          
          # Combine all coverage files and generate reports
          reportgenerator -reports:"coverage-*.cobertura.xml" -targetdir:"CoverageReport" -reporttypes:"Html;Cobertura;TextSummary"
          
          # Extract coverage percentage from the summary
          if [ -f "CoverageReport/Summary.txt" ]; then
            COVERAGE=$(grep "Line coverage:" "CoverageReport/Summary.txt" | grep -oE "[0-9]+\.[0-9]+%" | head -1 | sed 's/%//')
            if [ -z "$COVERAGE" ]; then
              echo "‚ö†Ô∏è  Could not extract coverage percentage, checking for alternative format..."
              COVERAGE=$(grep -E "Line coverage.*[0-9]+\.[0-9]+%" "CoverageReport/Summary.txt" | grep -oE "[0-9]+\.[0-9]+" | head -1)
            fi
          else
            echo "‚ö†Ô∏è  Summary.txt not found, attempting to extract from XML..."
            COVERAGE=$(grep -E "line-rate=\"[0-9]+\.[0-9]+\"" coverage-*.cobertura.xml | head -1 | grep -oE "[0-9]+\.[0-9]+" | head -1)
            if [ -n "$COVERAGE" ]; then
              # Convert from decimal to percentage
              COVERAGE=$(echo "$COVERAGE * 100" | bc -l | sed 's/\.[0-9]*$//')
            fi
          fi
          
          if [ -n "$COVERAGE" ]; then
            echo "üìà Current coverage: $COVERAGE%"
            echo "üéØ Required threshold: ${{ inputs.coverageThreshold }}%"
            
            # Compare coverage with threshold
            if (( $(echo "$COVERAGE < ${{ inputs.coverageThreshold }}" | bc -l) )); then
              echo "‚ùå Coverage $COVERAGE% is below threshold ${{ inputs.coverageThreshold }}%"
              echo "::error::Code coverage $COVERAGE% is below the required threshold of ${{ inputs.coverageThreshold }}%"
              exit 1
            else
              echo "‚úÖ Coverage $COVERAGE% meets threshold ${{ inputs.coverageThreshold }}%"
            fi
          else
            echo "‚ö†Ô∏è  Could not determine coverage percentage, but reports were generated"
          fi

      - name: Upload Coverage Reports
        if: inputs.hasTests == true && inputs.useMtpRunner == true && inputs.enableCodeCoverage == true
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            CoverageReport/
            coverage-*.cobertura.xml
          retention-days: 30

      - name: Setup Local .NET Tools
        if: inputs.functions != '[]'
        run: |
          dotnet new tool-manifest --force
          dotnet tool install Amazon.Lambda.Tools

      - name: Build and Publish Blazor WebAssembly
        if: inputs.webPath != ''
        run: dotnet publish ${{ inputs.webPath }} --configuration ${{ inputs.buildConfiguration }} --no-restore --output ${{ env.outputPath }}

      - name: Install jq
        if: inputs.functions != '[]'
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Build and Package All Lambda Functions
        run: |
          FUNCTIONS='${{ inputs.functions }}'
          COUNT=$(echo "$FUNCTIONS" | jq length)
          
          for i in $(seq 0 $((COUNT - 1))); do
            NAME=$(echo "$FUNCTIONS" | jq -r ".[$i].name")
            FUNC_PATH=$(echo "$FUNCTIONS" | jq -r ".[$i].path")
            ZIP_PATH="${{ env.outputPath }}/${NAME}.zip"
          
            echo "Packaging $NAME from FUNC_PATH..."
            dotnet tool run dotnet-lambda package -pl "$FUNC_PATH" --configuration ${{ inputs.buildConfiguration }} --no-restore --framework ${{ inputs.lambdaRuntimeVersion }} --output-package "$ZIP_PATH"
          
            echo "Packaged: $ZIP_PATH"
          done

      - name: Setup Node.js
        if: inputs.runCdk == true
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.nodeVersion }}

      - name: Install AWS CDK Locally
        if: inputs.runCdk == true
        run: npm install aws-cdk
        
      - name: Determine CDK Stack
        if: inputs.runCdk == true
        id: set-cdk-stack
        run: |
          STACK_BASE=${{ inputs.stackName }}
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "DEPLOY_ENV=$STACK_BASE-prod" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=$STACK_BASE-dev" >> $GITHUB_ENV
          fi

          echo "Deployment Environment: $DEPLOY_ENV"

          
      - name: Set Release Version
        id: set-release-version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV  # Extract tag name as release version
          else
            BUILD_NUMBER=${{ github.run_number }}
            BASE_VERSION=$(date +'%Y.%m.%d')
            echo "RELEASE_VERSION=v${BASE_VERSION}.${BUILD_NUMBER}" >> $GITHUB_ENV
          fi

          echo "Release Version: $RELEASE_VERSION"
          

      - name: Configure AWS Credentials via OIDC
        if: inputs.runCdk == true
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::403542860824:role/github-deploy-role

      - name: Run AWS CDK Deploy
        if: inputs.runCdk == true
        # ‚úÖ Pass the GitHub App secrets to the CDK workflow
        env:
          TMD_APP_ID: ${{ secrets.TMD_APP_ID }}
          TMD_APP_INSTALLATION_ID: ${{ secrets.TMD_APP_INSTALLATION_ID }}
          TMD_APP_PRIVATE_KEY: ${{ secrets.TMD_APP_PRIVATE_KEY }}
          TMD_WEBHOOK_SECRET: ${{ secrets.TMD_WEBHOOK_SECRET }}
          TMP_APP_ID: ${{ secrets.TMP_APP_ID }}
          TMP_APP_INSTALLATION_ID: ${{ secrets.TMP_APP_INSTALLATION_ID }}
          TMP_APP_PRIVATE_KEY: ${{ secrets.TMP_APP_PRIVATE_KEY }}
          TMP_WEBHOOK_SECRET: ${{ secrets.TMP_WEBHOOK_SECRET }}
          OPENAI_APIKEY: ${{ secrets.OPENAI_APIKEY }}
          OPENAI_ORGANIZATION: ${{ secrets.OPENAI_ORGANIZATION }}
        run: npx aws-cdk deploy --require-approval never --context releaseVersion=${{ env.RELEASE_VERSION }} ${{ env.DEPLOY_ENV }}

      - name: Tag Branch with Release Version
        if: startsWith(github.ref, 'refs/tags/') == false  # ‚úÖ Run only if NOT a tag build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          
          git tag ${{ env.RELEASE_VERSION }}  # ‚úÖ Create tag
          git push origin ${{ env.RELEASE_VERSION }}  # ‚úÖ Push tag to GitHub