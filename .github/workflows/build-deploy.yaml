name: Build and Deploy

on:
  workflow_call:
    inputs:
      webPath:
        description: "Path to the Blazor WebAssembly project"
        required: false
        type: string
      solution:
        description: "Solution file name"
        required: false
        type: string
      functionPath:
        description: "Path to the API project"
        required: false
        type: string
      functionName:
        description: "Name of the API"
        required: false
        type: string
      buildPlatform:
        description: "Build platform"
        required: false
        default: "Any CPU"
        type: string
      buildConfiguration:
        description: "Build configuration"
        required: false
        default: "release"
        type: string
      dotnetVersion:
        description: ".NET SDK version"
        required: false
        default: "9.0.x"
        type: string
      lambdaRuntimeVersion:
        description: "AWS Lambda runtime version"
        required: false
        default: "net9.0"
        type: string
      nodeVersion:
        description: "Node version"
        required: false
        default: "18.x"
        type: string
      outputPath:
        description: "Output directory for builds"
        required: false
        default: "publish"
        type: string
      hasTests: # ✅ New input to control test execution
        description: "Determines if tests should be run"
        required: false
        default: false
        type: boolean
      runCdk:  # ✅ New input to control CDK execution
        description: "Determines if AWS CDK steps should be run"
        required: false
        default: true
        type: boolean
      stackName:
        description: "Name of the AWS CDK stack"
        required: false
        type: string
      serverlessDeploy:
        description: "Determins if serverless deploy should be run"
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: write
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      outputPath: ${{ github.workspace }}/${{ inputs.outputPath }}

    steps:
      - name: Set Default Output Path If Not Provided
        run: |
          if [ -z "${{ inputs.outputPath }}" ]; then
            echo "outputPath=${{ github.workspace }}/publish" >> $GITHUB_ENV
          else
            echo "outputPath=${{ github.workspace}}/${{ inputs.outputPath }}" >> $GITHUB_ENV
          fi

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnetVersion }}

      - name: Restore Dependencies
        run: dotnet restore ${{ inputs.solution }}

      - name: Build Code
        run: dotnet build --configuration Release --no-restore

      - name: Test Code
        if: inputs.hasTests == true  # ✅ Run only if hasTests is set to true
        run: dotnet test --no-restore

      - name: Setup Local .NET Tools
        if: inputs.functionPath != '' && inputs.functionName != ''
        run: |
          dotnet new tool-manifest --force
          dotnet tool install Amazon.Lambda.Tools

      - name: Build and Publish Blazor WebAssembly
        if: inputs.webPath != ''
        run: dotnet publish ${{ inputs.webPath }} --configuration ${{ inputs.buildConfiguration }} --no-restore --output ${{ env.outputPath }}

      - name: Build and Package Lambda Function Code
        if: inputs.functionPath != '' && inputs.functionName != ''
        run: dotnet tool run dotnet-lambda package -pl ${{ inputs.functionPath }} --configuration ${{ inputs.buildConfiguration }} --no-restore --framework ${{ inputs.lambdaRuntimeVersion }} --output-package ${{ env.outputPath }}/${{ inputs.functionName }}.zip

      - name: Set Artifact
        if: inputs.functionPath != '' && inputs.functionName != '' && inputs.serverlessDeploy == true
        run: |
          ARTIFACT="${{ env.outputPath }}/${{ inputs.functionName }}.zip"  # ✅ Assign the variable first
          echo "ARTIFACT=$ARTIFACT" >> $GITHUB_ENV  # ✅ Append it correctly to GitHub Environment
          echo "Generated Artifact: $ARTIFACT"  # ✅ Debug output
          

      - name: Setup Node.js
        if: inputs.runCdk == true || inputs.serverlessDeploy == true
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.nodeVersion }}

      - name: Install AWS CDK Locally
        if: inputs.runCdk == true
        run: npm install aws-cdk
        
      - name: Install Serverless Locally
        if: inputs.serverlessDeploy == true
        run: npm install serverless        

      - name: Determine CDK Stack
        if: inputs.runCdk == true
        id: set-cdk-stack
        run: |
          STACK_BASE=${{ inputs.stackName }}
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "DEPLOY_ENV=$STACK_BASE-prod" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=$STACK_BASE-dev" >> $GITHUB_ENV
          fi

          echo "Deployment Environment: $DEPLOY_ENV"

      - name: Determine Serverless Stage
        if: inputs.serverlessDeploy == true
        id: set-serverless-stage
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "DEPLOY_ENV=prod" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=dev" >> $GITHUB_ENV
          fi

          echo "Deployment Environment: $DEPLOY_ENV"
          
      - name: Set Release Version
        id: set-release-version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV  # Extract tag name as release version
          else
            BUILD_NUMBER=${{ github.run_number }}
            BASE_VERSION=$(date +'%Y.%m.%d')
            echo "RELEASE_VERSION=v${BASE_VERSION}.${BUILD_NUMBER}" >> $GITHUB_ENV
          fi

          echo "Release Version: $RELEASE_VERSION"
          

      - name: Configure AWS Credentials via OIDC
        if: inputs.runCdk == true || inputs.serverlessDeploy == true
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::403542860824:role/github-deploy-role

      - name: Set GitHub App Secrets Based on Deployment Type
        if: inputs.runCdk == true
        env:
          TMP_APP_ID: ${{ secrets.TMP_APP_ID }}
          TMP_APP_INSTALLATION_ID: ${{ secrets.TMP_APP_INSTALLATION_ID }}
          TMP_APP_PRIVATE_KEY: ${{ secrets.TMP_APP_PRIVATE_KEY }}
          TMP_WEBHOOK_SECRET: ${{ secrets.TMP_WEBHOOK_SECRET }}
          TMD_APP_ID: ${{ secrets.TMD_APP_ID }}
          TMD_APP_INSTALLATION_ID: ${{ secrets.TMD_APP_INSTALLATION_ID }}
          TMD_APP_PRIVATE_KEY: ${{ secrets.TMD_APP_PRIVATE_KEY }}
          TMD_WEBHOOK_SECRET: ${{ secrets.TMD_WEBHOOK_SECRET }}
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "GH_APP_ID=$TMP_APP_ID" >> $GITHUB_ENV
            echo "GH_APP_INSTALLATION_ID=$TMP_APP_INSTALLATION_ID" >> $GITHUB_ENV
            echo "GH_APP_PRIVATE_KEY=$TMP_APP_PRIVATE_KEY" >> $GITHUB_ENV
            echo "GH_WEBHOOK_SECRET=$TMP_WEBHOOK_SECRET" >> $GITHUB_ENV
          else
            echo "GH_APP_ID=$TMD_APP_ID" >> $GITHUB_ENV
            echo "GH_APP_INSTALLATION_ID=$TMD_APP_INSTALLATION_ID" >> $GITHUB_ENV
            echo "GH_APP_PRIVATE_KEY=$TMD_APP_PRIVATE_KEY" >> $GITHUB_ENV
            echo "GH_WEBHOOK_SECRET=$TMD_WEBHOOK_SECRET" >> $GITHUB_ENV
          fi
            
      - name: Run AWS CDK Deploy
        if: inputs.runCdk == true
        # ✅ Pass the GitHub App secrets to the CDK workflow
        env:
          GH_APP_ID: ${{ env.GH_APP_ID }}
          GH_APP_INSTALLATION_ID: ${{ env.GH_APP_INSTALLATION_ID }}
          GH_APP_PRIVATE_KEY: ${{ env.GH_APP_PRIVATE_KEY }}
          GH_WEBHOOK_SECRET: ${{ env.GH_WEBHOOK_SECRET }}
        run: npx aws-cdk deploy --require-approval never --context releaseVersion=${{ env.RELEASE_VERSION }} ${{ env.DEPLOY_ENV }}

      - name: Run Serverless Deploy
        if: inputs.serverlessDeploy == true
        working-directory: ${{ inputs.functionPath }}
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}  # ✅ Set Serverless Key
        run: npx serverless deploy --stage ${{ env.DEPLOY_ENV }}

      - name: Tag Branch with Release Version
        if: startsWith(github.ref, 'refs/tags/') == false  # ✅ Run only if NOT a tag build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          
          git tag ${{ env.RELEASE_VERSION }}  # ✅ Create tag
          git push origin ${{ env.RELEASE_VERSION }}  # ✅ Push tag to GitHub