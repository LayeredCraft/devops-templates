name: Build
on:
  workflow_call: 
    inputs:
      dotnet-version:
        type: string
        default: "8.0.x"
      hasTests:
        description: "Determines if tests should be run"
        required: false
        default: true
        type: boolean
      useMtpRunner:
        description: "Use Microsoft Testing Platform runner (dotnet run) instead of legacy dotnet test"
        required: false
        default: false
        type: boolean
      testDirectory:
        description: "Directory containing test projects"
        required: false
        default: "tests"
        type: string
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ inputs.dotnet-version}}

      - name: Extract Version from Directory.Build.props
        id: version
        run: |
          VERSION_PREFIX=$(grep -m1 '<VersionPrefix>' Directory.Build.props | sed -E 's/.*<VersionPrefix>(.*)<\/VersionPrefix>.*/\1/')
          VERSION="$VERSION_PREFIX.${{ github.run_number }}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Discover Test Projects (MTP)
        if: inputs.hasTests == true && inputs.useMtpRunner == true
        id: discover-tests
        run: |
          echo "🔍 Discovering test projects in ${{ inputs.testDirectory }} directory..."
          
          TEST_PROJECTS=""
          TOTAL_FOUND=0
          TOTAL_SKIPPED=0
          
          for csproj in $(find ${{ inputs.testDirectory }} -name "*.csproj" -type f 2>/dev/null || true); do
            TOTAL_FOUND=$((TOTAL_FOUND + 1))
            PROJECT_NAME=$(basename "$csproj" .csproj)
            
            # Check if project has IsTestProject=false
            if grep -q "<IsTestProject>false</IsTestProject>" "$csproj"; then
              echo "⏭️  Skipping utility project: $PROJECT_NAME"
              TOTAL_SKIPPED=$((TOTAL_SKIPPED + 1))
              continue
            fi
            
            # Check if project has MTP runner enabled
            if grep -q "UseMicrosoftTestingPlatformRunner.*true" "$csproj"; then
              echo "✅ Found MTP test project: $PROJECT_NAME"
              TEST_PROJECTS="$TEST_PROJECTS $csproj"
            else
              echo "⚠️  Project $PROJECT_NAME doesn't have MTP runner enabled"
              TOTAL_SKIPPED=$((TOTAL_SKIPPED + 1))
            fi
          done
          
          echo "📊 Summary: Found $TOTAL_FOUND projects, using $((TOTAL_FOUND - TOTAL_SKIPPED)), skipped $TOTAL_SKIPPED"
          echo "test-projects=$TEST_PROJECTS" >> $GITHUB_OUTPUT
          
          # Validate we found at least one test project
          if [ -z "$TEST_PROJECTS" ]; then
            echo "❌ No MTP test projects found!"
            exit 1
          fi

      - name: Test Code (Legacy)
        if: inputs.hasTests == true && inputs.useMtpRunner == false
        run: dotnet test --no-restore

      - name: Test Code (MTP)
        if: inputs.hasTests == true && inputs.useMtpRunner == true
        run: |
          echo "🧪 Running MTP tests..."
          
          # Convert dotnet-version input to target framework monikers and run tests
          DOTNET_VERSIONS="${{ inputs.dotnet-version }}"
          
          # Run each discovered test project for each target framework
          for project in ${{ steps.discover-tests.outputs.test-projects }}; do
            PROJECT_NAME=$(basename "$project" .csproj)
            echo "🏃 Running tests for: $PROJECT_NAME"
            
            # Handle both single string and multi-line input
            for version in $DOTNET_VERSIONS; do
              # Extract major.minor version and convert to target framework
              if [[ "$version" =~ ^([0-9]+)\.([0-9]+) ]]; then
                MAJOR="${BASH_REMATCH[1]}"
                MINOR="${BASH_REMATCH[2]}"
                TFM="net${MAJOR}.${MINOR}"
                
                echo "🎯 Testing $PROJECT_NAME with framework: $TFM"
                
                # Run without coverage
                dotnet run --project "$project" --framework "$TFM"
              fi
            done
          done


      - name: Pack
        run: dotnet pack --configuration Release -o artifacts --no-build /p:Version=${{ env.VERSION }}

      - name: Publish to Nuget
        run: dotnet nuget push **/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate
      
      - name: Tag Commit
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  