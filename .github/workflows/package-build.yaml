name: Build
on:
  workflow_call: 
    inputs:
      dotnet-version:
        type: string
        default: "8.0.x"
      hasTests:
        description: "Determines if tests should be run"
        required: false
        default: true
        type: boolean
      useMtpRunner:
        description: "Use Microsoft Testing Platform runner (dotnet run) instead of legacy dotnet test"
        required: false
        default: false
        type: boolean
      testDirectory:
        description: "Directory containing test projects"
        required: false
        default: "tests"
        type: string
      enableCodeCoverage:
        description: "Enable code coverage collection"
        required: false
        default: false
        type: boolean
      coverageThreshold:
        description: "Minimum code coverage percentage required (0-100)"
        required: false
        default: 80
        type: number
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ inputs.dotnet-version}}

      - name: Extract Version from Directory.Build.props
        id: version
        run: |
          VERSION_PREFIX=$(grep -m1 '<VersionPrefix>' Directory.Build.props | sed -E 's/.*<VersionPrefix>(.*)<\/VersionPrefix>.*/\1/')
          VERSION="$VERSION_PREFIX.${{ github.run_number }}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Discover Test Projects (MTP)
        if: inputs.hasTests == true && inputs.useMtpRunner == true
        id: discover-tests
        run: |
          echo "🔍 Discovering test projects in ${{ inputs.testDirectory }} directory..."
          
          TEST_PROJECTS=""
          TOTAL_FOUND=0
          TOTAL_SKIPPED=0
          
          for csproj in $(find ${{ inputs.testDirectory }} -name "*.csproj" -type f 2>/dev/null || true); do
            TOTAL_FOUND=$((TOTAL_FOUND + 1))
            PROJECT_NAME=$(basename "$csproj" .csproj)
            
            # Check if project has IsTestProject=false
            if grep -q "<IsTestProject>false</IsTestProject>" "$csproj"; then
              echo "⏭️  Skipping utility project: $PROJECT_NAME"
              TOTAL_SKIPPED=$((TOTAL_SKIPPED + 1))
              continue
            fi
            
            # Check if project has MTP runner enabled
            if grep -q "UseMicrosoftTestingPlatformRunner.*true" "$csproj"; then
              echo "✅ Found MTP test project: $PROJECT_NAME"
              TEST_PROJECTS="$TEST_PROJECTS $csproj"
            else
              echo "⚠️  Project $PROJECT_NAME doesn't have MTP runner enabled"
              TOTAL_SKIPPED=$((TOTAL_SKIPPED + 1))
            fi
          done
          
          echo "📊 Summary: Found $TOTAL_FOUND projects, using $((TOTAL_FOUND - TOTAL_SKIPPED)), skipped $TOTAL_SKIPPED"
          echo "test-projects=$TEST_PROJECTS" >> $GITHUB_OUTPUT
          
          # Validate we found at least one test project
          if [ -z "$TEST_PROJECTS" ]; then
            echo "❌ No MTP test projects found!"
            exit 1
          fi

      - name: Extract Target Frameworks
        if: inputs.hasTests == true && inputs.useMtpRunner == true
        id: extract-frameworks
        run: |
          echo "🎯 Extracting target frameworks from dotnet-version..."
          
          # Convert dotnet-version input to target framework monikers
          FRAMEWORKS=""
          DOTNET_VERSIONS="${{ inputs.dotnet-version }}"
          
          # Handle both single string and multi-line input
          for version in $DOTNET_VERSIONS; do
            # Extract major.minor version and convert to target framework
            if [[ "$version" =~ ^([0-9]+)\.([0-9]+) ]]; then
              MAJOR="${BASH_REMATCH[1]}"
              MINOR="${BASH_REMATCH[2]}"
              TFM="net${MAJOR}.${MINOR}"
              FRAMEWORKS="$FRAMEWORKS $TFM"
              echo "✅ Mapped $version → $TFM"
            fi
          done
          
          echo "📋 Target frameworks: $FRAMEWORKS"
          echo "frameworks=$FRAMEWORKS" >> $GITHUB_OUTPUT

      - name: Test Code (Legacy)
        if: inputs.hasTests == true && inputs.useMtpRunner == false
        run: dotnet test --no-restore

      - name: Test Code (MTP)
        if: inputs.hasTests == true && inputs.useMtpRunner == true
        run: |
          echo "🧪 Running MTP tests with coverage: ${{ inputs.enableCodeCoverage }}"
          
          # Install ReportGenerator if coverage is enabled
          if [ "${{ inputs.enableCodeCoverage }}" == "true" ]; then
            echo "📊 Installing ReportGenerator..."
            dotnet tool install --global dotnet-reportgenerator-globaltool
          fi
          
          # Run each discovered test project for each target framework
          for project in ${{ steps.discover-tests.outputs.test-projects }}; do
            PROJECT_NAME=$(basename "$project" .csproj)
            echo "🏃 Running tests for: $PROJECT_NAME"
            
            for framework in ${{ steps.extract-frameworks.outputs.frameworks }}; do
              echo "🎯 Testing $PROJECT_NAME with framework: $framework"
              
              if [ "${{ inputs.enableCodeCoverage }}" == "true" ]; then
                # Run with coverage - specify absolute path to ensure coverage file is in current directory
                dotnet run --project "$project" --framework "$framework" -- --coverage --coverage-output-format cobertura --coverage-output "$PWD/coverage-$PROJECT_NAME-$framework.cobertura.xml"
              else
                # Run without coverage
                dotnet run --project "$project" --framework "$framework"
              fi
            done
          done

      - name: Generate Coverage Reports (MTP)
        if: inputs.hasTests == true && inputs.useMtpRunner == true && inputs.enableCodeCoverage == true
        run: |
          echo "📊 Generating combined coverage reports from multiple frameworks..."
          
          # Check if any coverage files exist (now includes framework suffix)
          if ! ls coverage-*-*.cobertura.xml 1> /dev/null 2>&1; then
            echo "❌ No multi-framework coverage files found!"
            # Fallback: check for old single-framework format
            if ! ls coverage-*.cobertura.xml 1> /dev/null 2>&1; then
              echo "❌ No coverage files found at all!"
              exit 1
            else
              echo "📋 Found single-framework coverage files, using those..."
            fi
          fi
          
          # List all coverage files for debugging
          echo "📋 Coverage files found:"
          ls -la coverage-*.cobertura.xml || true
          
          # Combine all coverage files and generate reports (supports both formats)
          reportgenerator -reports:"coverage-*.cobertura.xml" -targetdir:"CoverageReport" -reporttypes:"Html;Cobertura;TextSummary"
          
          # Extract coverage percentage from the summary
          if [ -f "CoverageReport/Summary.txt" ]; then
            COVERAGE=$(grep "Line coverage:" "CoverageReport/Summary.txt" | grep -oE "[0-9]+\.[0-9]+%" | head -1 | sed 's/%//')
            if [ -z "$COVERAGE" ]; then
              echo "⚠️  Could not extract coverage percentage, checking for alternative format..."
              COVERAGE=$(grep -E "Line coverage.*[0-9]+\.[0-9]+%" "CoverageReport/Summary.txt" | grep -oE "[0-9]+\.[0-9]+" | head -1)
            fi
          else
            echo "⚠️  Summary.txt not found, attempting to extract from XML..."
            COVERAGE=$(grep -E "line-rate=\"[0-9]+\.[0-9]+\"" coverage-*.cobertura.xml | head -1 | grep -oE "[0-9]+\.[0-9]+" | head -1)
            if [ -n "$COVERAGE" ]; then
              # Convert from decimal to percentage
              COVERAGE=$(echo "$COVERAGE * 100" | bc -l | sed 's/\.[0-9]*$//')
            fi
          fi
          
          if [ -n "$COVERAGE" ]; then
            echo "📈 Combined coverage across all frameworks: $COVERAGE%"
            echo "🎯 Required threshold: ${{ inputs.coverageThreshold }}%"
            
            # Compare coverage with threshold
            if (( $(echo "$COVERAGE < ${{ inputs.coverageThreshold }}" | bc -l) )); then
              echo "❌ Coverage $COVERAGE% is below threshold ${{ inputs.coverageThreshold }}%"
              echo "::error::Code coverage $COVERAGE% is below the required threshold of ${{ inputs.coverageThreshold }}%"
              exit 1
            else
              echo "✅ Combined coverage $COVERAGE% meets threshold ${{ inputs.coverageThreshold }}%"
            fi
          else
            echo "⚠️  Could not determine coverage percentage, but reports were generated"
          fi

      - name: Upload Coverage Reports
        if: inputs.hasTests == true && inputs.enableCodeCoverage == true
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            CoverageReport/
            coverage-*.cobertura.xml
          retention-days: 30

      - name: Pack
        run: dotnet pack --configuration Release -o artifacts --no-build /p:Version=${{ env.VERSION }}

      - name: Publish to Nuget
        run: dotnet nuget push **/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate
      
      - name: Tag Commit
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  